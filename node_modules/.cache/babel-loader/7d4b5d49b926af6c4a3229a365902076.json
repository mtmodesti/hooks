{"ast":null,"code":"var _jsxFileName = \"/home/modesti/Desktop/sfsd/src/components/useState/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.css\";\nimport { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { CounterContext } from \"../../providers/counterProvider/counter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UseStateComponent = () => {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const teste = \"const somar = () => useState(count + 1)\";\n  const {\n    counter\n  } = useContext(CounterContext);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {},\n      children: \"asd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Nosso principal e mais b\\xE1sico hook do React.JS. Sua fun\\xE7\\xE3o \\xE9 a capacidade de armazenar um valor, esse valor pode ser de qualquer tipo, uma string, um array, um booleano, um array de objetos, enfim, o que voc\\xEA precisar armazenar, e, al\\xE9m de armazenar, podemos alterar sempre que necess\\xE1rio esse valor. Vamos entender um pouco melhor. Para declarar uma vari\\xE1vel com o useState, usamos a seguinte sintaxe: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 66\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 10\n      }, this), \"const [count, setCount] = useState(0)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 47\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 10\n      }, this), \"Perceba que estamos desestruturando de dentro do useState um array com dois valores, o count e o setCount, e logo em frente atribuindo o valor inicial de 0. Os nomes poderiam ser qualquer coisa, mas vamos usar o famoso exemplo do contador. Estamos iniciando um vari\\xE1vel qualquer com o nome de count e atribuindo para ela o valor de 0.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 59\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 10\n      }, this), \"Para alterarmos agora o seu valor, usamos o setCount, que desestruturamos do useState e nada mais que \\xE9 que uma fun\\xE7\\xE3o do react com a capacidade de alterar o valor do count. N\\xE3o podemos alterar diretamente igual no JavaScript pois o React trabalha com o conceito de imutabilidade, t\\xF3pico para outro dia. A padroniza\\xE7\\xE3o dos nomes segue essa estrutura, declaramos uma vari\\xE1vel primeira para armazenar o valor, e fun\\xE7\\xE3o de alterar a vari\\xE1vel leva o nome set como prefixo:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 10\n      }, this), \"Exemplos: [lista, setLista] ou [arrayQualquer, setArrayQualquer]\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 10\n      }, this), \"Ent\\xE3o agora que entedemos como salvar um valor, e que precisamos usar o segundo par\\xE2metro para alterar o valor ficou f\\xE1cil montarmos um simples contador de exemplo. Basta criarmos um bot\\xE3o para executar a fun\\xE7\\xE3o de somar e um outro para diminuir o valor do contador, que inicialmente definimos como 0 por padr\\xE3o. Para a fun\\xE7\\xE3o de somar, usamos o seguinte trecho: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 10\n      }, this), \"`$\", teste, \"`\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 10\n      }, this), \"E a mesma coisa para a fun\\xE7\\xE3o de diminuir, s\\xF3 que com count - 1. Agora basta inserirmos isso na fun\\xE7\\xE3o de onClick de nosso bot\\xE3o e inserir tudo isso para renderizar em tela. O resultado vc confere abaixo\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"counter\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setCount(count - 1);\n        },\n        children: \"diminuir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: counter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setCount(count + 1);\n        },\n        children: \"Somar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UseStateComponent, \"ekDLFHpmyqIWs8vSLc5zZhhzn9k=\");\n\n_c = UseStateComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseStateComponent\");","map":{"version":3,"names":["useState","useContext","CounterContext","UseStateComponent","count","setCount","teste","counter"],"sources":["/home/modesti/Desktop/sfsd/src/components/useState/index.tsx"],"sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { CounterProvider } from \"../../providers/counterProvider/counter\";\nimport { CounterContext } from \"../../providers/counterProvider/counter\";\n\nexport const UseStateComponent = () => {\n  const [count, setCount] = useState(0);\n  const teste = \"const somar = () => useState(count + 1)\";\n\n  const {counter} = useContext(CounterContext);\n  \n\n  \n  return (\n    <main>\n      <button\n        onClick={() => {\n          \n        \n      }}\n      >\n        asd\n      </button>\n      <p>\n        Nosso principal e mais básico hook do React.JS. Sua função é a\n        capacidade de armazenar um valor, esse valor pode ser de qualquer tipo,\n        uma string, um array, um booleano, um array de objetos, enfim, o que\n        você precisar armazenar, e, além de armazenar, podemos alterar sempre\n        que necessário esse valor. Vamos entender um pouco melhor. Para declarar\n        uma variável com o useState, usamos a seguinte sintaxe: {<br />}{\" \"}\n        {<br />}\n        const [count, setCount] = useState(0){<br />}\n        {<br />}\n        Perceba que estamos desestruturando de dentro do useState um array com\n        dois valores, o count e o setCount, e logo em frente atribuindo o valor\n        inicial de 0. Os nomes poderiam ser qualquer coisa, mas vamos usar o\n        famoso exemplo do contador. Estamos iniciando um variável qualquer com o\n        nome de count e atribuindo para ela o valor de 0.{<br />}\n        {<br />}\n        Para alterarmos agora o seu valor, usamos o setCount, que\n        desestruturamos do useState e nada mais que é que uma função do react\n        com a capacidade de alterar o valor do count. Não podemos alterar\n        diretamente igual no JavaScript pois o React trabalha com o conceito de\n        imutabilidade, tópico para outro dia. A padronização dos nomes segue\n        essa estrutura, declaramos uma variável primeira para armazenar o valor,\n        e função de alterar a variável leva o nome set como prefixo:\n        {<br />}\n        {<br />}\n        Exemplos: [lista, setLista] ou [arrayQualquer, setArrayQualquer]{\" \"}\n        {<br />}\n        {<br />}\n        Então agora que entedemos como salvar um valor, e que precisamos usar o\n        segundo parâmetro para alterar o valor ficou fácil montarmos um simples\n        contador de exemplo. Basta criarmos um botão para executar a função de\n        somar e um outro para diminuir o valor do contador, que inicialmente\n        definimos como 0 por padrão. Para a função de somar, usamos o seguinte\n        trecho: <br />\n        {<br />}\n        `${teste}`<br />\n        {<br />}E a mesma coisa para a função de diminuir, só que com count - 1.\n        Agora basta inserirmos isso na função de onClick de nosso botão e\n        inserir tudo isso para renderizar em tela. O resultado vc confere abaixo\n      </p>\n      <div className=\"counter\">\n        <button\n          onClick={() => {\n            setCount(count - 1);\n          }}\n        >\n          diminuir\n        </button>\n        <span>{counter}</span>\n        <button\n          onClick={() => {\n            setCount(count + 1);\n          }}\n        >\n          Somar\n        </button>\n      </div>\n    </main>\n  );\n};\n"],"mappings":";;;AAAA,OAAO,cAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,OAA3B;AAEA,SAASC,cAAT,QAA+B,yCAA/B;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EAAA;;EACrC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAMM,KAAK,GAAG,yCAAd;EAEA,MAAM;IAACC;EAAD,IAAYN,UAAU,CAACC,cAAD,CAA5B;EAIA,oBACE;IAAA,wBACE;MACE,OAAO,EAAE,MAAM,CAGhB,CAJD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eASE;MAAA,ucAM2D;QAAA;QAAA;QAAA;MAAA,QAN3D,EAMmE,GANnE,eAOG;QAAA;QAAA;QAAA;MAAA,QAPH,wDAQwC;QAAA;QAAA;QAAA;MAAA,QARxC,eASG;QAAA;QAAA;QAAA;MAAA,QATH,oWAcoD;QAAA;QAAA;QAAA;MAAA,QAdpD,eAeG;QAAA;QAAA;QAAA;MAAA,QAfH,wgBAuBG;QAAA;QAAA;QAAA;MAAA,QAvBH,eAwBG;QAAA;QAAA;QAAA;MAAA,QAxBH,sEAyBmE,GAzBnE,eA0BG;QAAA;QAAA;QAAA;MAAA,QA1BH,eA2BG;QAAA;QAAA;QAAA;MAAA,QA3BH,yZAiCU;QAAA;QAAA;QAAA;MAAA,QAjCV,eAkCG;QAAA;QAAA;QAAA;MAAA,QAlCH,QAmCKI,KAnCL,oBAmCY;QAAA;QAAA;QAAA;MAAA,QAnCZ,eAoCG;QAAA;QAAA;QAAA;MAAA,QApCH;IAAA;MAAA;MAAA;MAAA;IAAA,QATF,eAiDE;MAAK,SAAS,EAAC,SAAf;MAAA,wBACE;QACE,OAAO,EAAE,MAAM;UACbD,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;QACD,CAHH;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAQE;QAAA,UAAOG;MAAP;QAAA;QAAA;QAAA;MAAA,QARF,eASE;QACE,OAAO,EAAE,MAAM;UACbF,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;QACD,CAHH;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA,QAjDF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqED,CA7EM;;GAAMD,iB;;KAAAA,iB"},"metadata":{},"sourceType":"module"}