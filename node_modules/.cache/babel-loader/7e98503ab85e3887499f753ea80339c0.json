{"ast":null,"code":"var _jsxFileName = \"/home/modesti/Desktop/sfsd/src/components/useState/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.css\";\nimport { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { CounterContext } from \"../../providers/counterProvider/counter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UseStateComponent = () => {\n  _s();\n\n  const counter = useContext(CounterContext);\n  const [count, setCount] = useState(counter);\n  let expression = 'const plusOne = () => ';\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(CounterContext.Provider, {\n      value: {\n        count,\n        setCount\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Nosso principal e mais b\\xE1sico hook do React.JS. Sua fun\\xE7\\xE3o \\xE9 a capacidade de armazenar um valor, esse valor pode ser de qualquer tipo, uma string, um array, um booleano, um array de objetos, enfim, o que voc\\xEA precisar armazenar, e, al\\xE9m de armazenar, podemos alterar sempre que necess\\xE1rio esse valor. Vamos entender um pouco melhor. Para declarar uma vari\\xE1vel com o useState, usamos a seguinte sintaxe:\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 12\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this), \"const [count, setCount] = useState(0)\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 49\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 12\n        }, this), \"Perceba que estamos desestruturando de dentro do useState um array com dois valores, o count e o setCount, e logo em frente atribuindo o valor inicial de 0. Os nomes poderiam ser qualquer coisa, mas vamos usar o famoso exemplo do contador. Estamos iniciando um vari\\xE1vel qualquer com o nome de count e atribuindo para ela o valor de 0.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 12\n        }, this), \"Para alterarmos agora o seu valor, usamos o setCount, que desestruturamos do useState e nada mais que \\xE9 que uma fun\\xE7\\xE3o do react com a capacidade de alterar o valor do count. N\\xE3o podemos alterar diretamente igual no JavaScript pois o React trabalha com o conceito de imutabilidade, t\\xF3pico para outro dia. A padroniza\\xE7\\xE3o dos nomes segue essa estrutura, declaramos uma vari\\xE1vel primeira para armazenar o valor, e fun\\xE7\\xE3o de alterar a vari\\xE1vel leva o nome set como prefixo:\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 12\n        }, this), \"Exemplos: [lista, setLista] ou [arrayQualquer, setArrayQualquer]\", \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 12\n        }, this), \"Ent\\xE3o agora que entedemos como salvar um valor, e que precisamos usar o segundo par\\xE2metro para alterar o valor ficou f\\xE1cil montarmos um simples contador de exemplo. Basta criarmos um bot\\xE3o para executar a fun\\xE7\\xE3o de somar e um outro para diminuir o valor do contador, que inicialmente definimos como 0 por padr\\xE3o. Para a fun\\xE7\\xE3o de somar, usamos o seguinte trecho: \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 12\n        }, this), \"`$\", counter, \"`\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 23\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 12\n        }, this), \"E a mesma coisa para a fun\\xE7\\xE3o de diminuir, s\\xF3 que com count - 1. Agora basta inserirmos isso na fun\\xE7\\xE3o de onClick de nosso bot\\xE3o e inserir tudo isso para renderizar em tela. O resultado vc confere abaixo\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"counter\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCount(count - 1);\n          },\n          children: \"diminuir\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: count\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            setCount(count + 1);\n          },\n          children: \"Somar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UseStateComponent, \"hCZqOoOPhNUl+WrXXnATA0BOxgM=\");\n\n_c = UseStateComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"UseStateComponent\");","map":{"version":3,"names":["useState","useContext","CounterContext","UseStateComponent","counter","count","setCount","expression"],"sources":["/home/modesti/Desktop/sfsd/src/components/useState/index.tsx"],"sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\nimport { useContext } from \"react\";\nimport { CounterContext } from \"../../providers/counterProvider/counter\";\n\nexport const UseStateComponent = () => {\n\n  const counter = useContext(CounterContext);\n  const [count, setCount] = useState(counter);\n  let expression = 'const plusOne = () => '\n  \n  return (\n    <main>\n      <CounterContext.Provider value={{ count, setCount }}>\n        <p>\n          Nosso principal e mais básico hook do React.JS. Sua função é a\n          capacidade de armazenar um valor, esse valor pode ser de qualquer\n          tipo, uma string, um array, um booleano, um array de objetos, enfim, o\n          que você precisar armazenar, e, além de armazenar, podemos alterar\n          sempre que necessário esse valor. Vamos entender um pouco melhor. Para\n          declarar uma variável com o useState, usamos a seguinte sintaxe:{\" \"}\n          {<br />} {<br />}\n          const [count, setCount] = useState(0){<br />}\n          {<br />}\n          Perceba que estamos desestruturando de dentro do useState um array com\n          dois valores, o count e o setCount, e logo em frente atribuindo o\n          valor inicial de 0. Os nomes poderiam ser qualquer coisa, mas vamos\n          usar o famoso exemplo do contador. Estamos iniciando um variável\n          qualquer com o nome de count e atribuindo para ela o valor de 0.\n          {<br />}\n          {<br />}\n          Para alterarmos agora o seu valor, usamos o setCount, que\n          desestruturamos do useState e nada mais que é que uma função do react\n          com a capacidade de alterar o valor do count. Não podemos alterar\n          diretamente igual no JavaScript pois o React trabalha com o conceito\n          de imutabilidade, tópico para outro dia. A padronização dos nomes\n          segue essa estrutura, declaramos uma variável primeira para armazenar\n          o valor, e função de alterar a variável leva o nome set como prefixo:\n          {<br />}\n          {<br />}\n          Exemplos: [lista, setLista] ou [arrayQualquer, setArrayQualquer]{\" \"}\n          {<br />}\n          {<br />}\n          Então agora que entedemos como salvar um valor, e que precisamos usar\n          o segundo parâmetro para alterar o valor ficou fácil montarmos um\n          simples contador de exemplo. Basta criarmos um botão para executar a\n          função de somar e um outro para diminuir o valor do contador, que\n          inicialmente definimos como 0 por padrão. Para a função de somar,\n          usamos o seguinte trecho: <br />\n          {<br />}\n          `${counter}`<br />\n          {<br />}E a mesma coisa para a função de diminuir, só que com count -\n          1. Agora basta inserirmos isso na função de onClick de nosso botão e\n          inserir tudo isso para renderizar em tela. O resultado vc confere\n          abaixo\n        </p>\n        <div className=\"counter\">\n          <button\n            onClick={() => {\n              setCount(count - 1);\n            }}\n          >\n            diminuir\n          </button>\n          <span>{count}</span>\n          <button\n            onClick={() => {\n              setCount(count + 1);\n            }}\n          >\n            Somar\n          </button>\n        </div>\n      </CounterContext.Provider>\n    </main>\n  );\n};\n"],"mappings":";;;AAAA,OAAO,cAAP;AACA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,cAAT,QAA+B,yCAA/B;;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;EAAA;;EAErC,MAAMC,OAAO,GAAGH,UAAU,CAACC,cAAD,CAA1B;EACA,MAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAACI,OAAD,CAAlC;EACA,IAAIG,UAAU,GAAG,wBAAjB;EAEA,oBACE;IAAA,uBACE,QAAC,cAAD,CAAgB,QAAhB;MAAyB,KAAK,EAAE;QAAEF,KAAF;QAASC;MAAT,CAAhC;MAAA,wBACE;QAAA,ybAMmE,GANnE,eAOG;UAAA;UAAA;UAAA;QAAA,QAPH,oBAOY;UAAA;UAAA;UAAA;QAAA,QAPZ,wDAQwC;UAAA;UAAA;UAAA;QAAA,QARxC,eASG;UAAA;UAAA;UAAA;QAAA,QATH,oWAeG;UAAA;UAAA;UAAA;QAAA,QAfH,eAgBG;UAAA;UAAA;UAAA;QAAA,QAhBH,wgBAwBG;UAAA;UAAA;UAAA;QAAA,QAxBH,eAyBG;UAAA;UAAA;UAAA;QAAA,QAzBH,sEA0BmE,GA1BnE,eA2BG;UAAA;UAAA;UAAA;QAAA,QA3BH,eA4BG;UAAA;UAAA;UAAA;QAAA,QA5BH,yZAkC4B;UAAA;UAAA;UAAA;QAAA,QAlC5B,eAmCG;UAAA;UAAA;UAAA;QAAA,QAnCH,QAoCKF,OApCL,oBAoCc;UAAA;UAAA;UAAA;QAAA,QApCd,eAqCG;UAAA;UAAA;UAAA;QAAA,QArCH;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eA2CE;QAAK,SAAS,EAAC,SAAf;QAAA,wBACE;UACE,OAAO,EAAE,MAAM;YACbE,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;UACD,CAHH;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAQE;UAAA,UAAOA;QAAP;UAAA;UAAA;UAAA;QAAA,QARF,eASE;UACE,OAAO,EAAE,MAAM;YACbC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;UACD,CAHH;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QATF;MAAA;QAAA;QAAA;QAAA;MAAA,QA3CF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AAiED,CAvEM;;GAAMF,iB;;KAAAA,iB"},"metadata":{},"sourceType":"module"}